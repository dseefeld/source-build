From e850db5d48059c082f1c2328a7926e99360c32ec Mon Sep 17 00:00:00 2001
From: Charles Stoner <chucks@microsoft.com>
Date: Wed, 3 Feb 2021 11:02:41 -0800
Subject: [PATCH] Updates for conditional expression type breaking change
 (#47738)

---
 .../tools/Common/JitInterface/CorInfoBase.cs  | 62 +++++++++----------
 .../tools/Common/JitInterface/CorInfoTypes.cs |  2 +-
 .../JitInterface/ThunkGenerator/Program.cs    |  2 +-
 .../src/System/Xml/DataSetMappper.cs          |  4 +-
 .../src/System/IO/Path.cs                     | 10 +--
 5 files changed, 40 insertions(+), 40 deletions(-)

diff --git a/src/coreclr/tools/Common/JitInterface/CorInfoBase.cs b/src/coreclr/tools/Common/JitInterface/CorInfoBase.cs
index 5405efba6c8..3fc35919e96 100644
--- a/src/coreclr/tools/Common/JitInterface/CorInfoBase.cs
+++ b/src/coreclr/tools/Common/JitInterface/CorInfoBase.cs
@@ -61,7 +61,7 @@ static byte _getMethodInfo(IntPtr thisHandle, IntPtr* ppException, CORINFO_METHO
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.getMethodInfo(ftn, info) ? 1 : 0;
+                return _this.getMethodInfo(ftn, info) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -105,7 +105,7 @@ static byte _canTailCall(IntPtr thisHandle, IntPtr* ppException, CORINFO_METHOD_
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.canTailCall(callerHnd, declaredCalleeHnd, exactCalleeHnd, fIsTailPrefix != 0) ? 1 : 0;
+                return _this.canTailCall(callerHnd, declaredCalleeHnd, exactCalleeHnd, fIsTailPrefix != 0) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -192,7 +192,7 @@ static byte _resolveVirtualMethod(IntPtr thisHandle, IntPtr* ppException, CORINF
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.resolveVirtualMethod(info) ? 1 : 0;
+                return _this.resolveVirtualMethod(info) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -266,7 +266,7 @@ static byte _isIntrinsicType(IntPtr thisHandle, IntPtr* ppException, CORINFO_CLA
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.isIntrinsicType(classHnd) ? 1 : 0;
+                return _this.isIntrinsicType(classHnd) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -296,7 +296,7 @@ static byte _pInvokeMarshalingRequired(IntPtr thisHandle, IntPtr* ppException, C
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.pInvokeMarshalingRequired(method, callSiteSig) ? 1 : 0;
+                return _this.pInvokeMarshalingRequired(method, callSiteSig) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -311,7 +311,7 @@ static byte _satisfiesMethodConstraints(IntPtr thisHandle, IntPtr* ppException,
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.satisfiesMethodConstraints(parent, method) ? 1 : 0;
+                return _this.satisfiesMethodConstraints(parent, method) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -326,7 +326,7 @@ static byte _isCompatibleDelegate(IntPtr thisHandle, IntPtr* ppException, CORINF
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.isCompatibleDelegate(objCls, methodParentCls, method, delegateCls, ref *pfIsOpenDelegate) ? 1 : 0;
+                return _this.isCompatibleDelegate(objCls, methodParentCls, method, delegateCls, ref *pfIsOpenDelegate) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -427,7 +427,7 @@ static byte _tryResolveToken(IntPtr thisHandle, IntPtr* ppException, CORINFO_RES
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.tryResolveToken(ref *pResolvedToken) ? 1 : 0;
+                return _this.tryResolveToken(ref *pResolvedToken) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -485,7 +485,7 @@ static byte _isValidToken(IntPtr thisHandle, IntPtr* ppException, CORINFO_MODULE
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.isValidToken(module, metaTOK) ? 1 : 0;
+                return _this.isValidToken(module, metaTOK) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -500,7 +500,7 @@ static byte _isValidStringRef(IntPtr thisHandle, IntPtr* ppException, CORINFO_MO
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.isValidStringRef(module, metaTOK) ? 1 : 0;
+                return _this.isValidStringRef(module, metaTOK) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -605,7 +605,7 @@ static byte _isValueClass(IntPtr thisHandle, IntPtr* ppException, CORINFO_CLASS_
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.isValueClass(cls) ? 1 : 0;
+                return _this.isValueClass(cls) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -650,7 +650,7 @@ static byte _isStructRequiringStackAllocRetBuf(IntPtr thisHandle, IntPtr* ppExce
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.isStructRequiringStackAllocRetBuf(cls) ? 1 : 0;
+                return _this.isStructRequiringStackAllocRetBuf(cls) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -784,7 +784,7 @@ static byte _canAllocateOnStack(IntPtr thisHandle, IntPtr* ppException, CORINFO_
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.canAllocateOnStack(cls) ? 1 : 0;
+                return _this.canAllocateOnStack(cls) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -859,7 +859,7 @@ static byte _checkMethodModifier(IntPtr thisHandle, IntPtr* ppException, CORINFO
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.checkMethodModifier(hMethod, modifier, fOptional != 0) ? 1 : 0;
+                return _this.checkMethodModifier(hMethod, modifier, fOptional != 0) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -979,7 +979,7 @@ static byte _getReadyToRunHelper(IntPtr thisHandle, IntPtr* ppException, CORINFO
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.getReadyToRunHelper(ref *pResolvedToken, ref *pGenericLookupKind, id, ref *pLookup) ? 1 : 0;
+                return _this.getReadyToRunHelper(ref *pResolvedToken, ref *pGenericLookupKind, id, ref *pLookup) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -1097,7 +1097,7 @@ static byte _canCast(IntPtr thisHandle, IntPtr* ppException, CORINFO_CLASS_STRUC
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.canCast(child, parent) ? 1 : 0;
+                return _this.canCast(child, parent) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -1112,7 +1112,7 @@ static byte _areTypesEquivalent(IntPtr thisHandle, IntPtr* ppException, CORINFO_
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.areTypesEquivalent(cls1, cls2) ? 1 : 0;
+                return _this.areTypesEquivalent(cls1, cls2) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -1172,7 +1172,7 @@ static byte _isMoreSpecificType(IntPtr thisHandle, IntPtr* ppException, CORINFO_
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.isMoreSpecificType(cls1, cls2) ? 1 : 0;
+                return _this.isMoreSpecificType(cls1, cls2) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -1217,7 +1217,7 @@ static byte _satisfiesClassConstraints(IntPtr thisHandle, IntPtr* ppException, C
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.satisfiesClassConstraints(cls) ? 1 : 0;
+                return _this.satisfiesClassConstraints(cls) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -1232,7 +1232,7 @@ static byte _isSDArray(IntPtr thisHandle, IntPtr* ppException, CORINFO_CLASS_STR
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.isSDArray(cls) ? 1 : 0;
+                return _this.isSDArray(cls) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -1366,7 +1366,7 @@ static byte _isFieldStatic(IntPtr thisHandle, IntPtr* ppException, CORINFO_FIELD
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.isFieldStatic(fldHnd) ? 1 : 0;
+                return _this.isFieldStatic(fldHnd) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -1613,7 +1613,7 @@ static byte _runWithErrorTrap(IntPtr thisHandle, IntPtr* ppException, void* func
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.runWithErrorTrap(function, parameter) ? 1 : 0;
+                return _this.runWithErrorTrap(function, parameter) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -1732,7 +1732,7 @@ static byte _getSystemVAmd64PassStructInRegisterDescriptor(IntPtr thisHandle, In
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.getSystemVAmd64PassStructInRegisterDescriptor(structHnd, structPassInRegDescPtr) ? 1 : 0;
+                return _this.getSystemVAmd64PassStructInRegisterDescriptor(structHnd, structPassInRegDescPtr) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -1982,7 +1982,7 @@ static byte _canGetCookieForPInvokeCalliSig(IntPtr thisHandle, IntPtr* ppExcepti
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.canGetCookieForPInvokeCalliSig(szMetaSig) ? 1 : 0;
+                return _this.canGetCookieForPInvokeCalliSig(szMetaSig) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -2040,7 +2040,7 @@ static byte _canAccessFamily(IntPtr thisHandle, IntPtr* ppException, CORINFO_MET
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.canAccessFamily(hCaller, hInstanceType) ? 1 : 0;
+                return _this.canAccessFamily(hCaller, hInstanceType) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -2055,7 +2055,7 @@ static byte _isRIDClassDomainID(IntPtr thisHandle, IntPtr* ppException, CORINFO_
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.isRIDClassDomainID(cls) ? 1 : 0;
+                return _this.isRIDClassDomainID(cls) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -2130,7 +2130,7 @@ static byte _canGetVarArgsHandle(IntPtr thisHandle, IntPtr* ppException, CORINFO
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.canGetVarArgsHandle(pSig) ? 1 : 0;
+                return _this.canGetVarArgsHandle(pSig) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -2247,7 +2247,7 @@ static byte _getTailCallHelpers(IntPtr thisHandle, IntPtr* ppException, CORINFO_
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.getTailCallHelpers(ref *callToken, sig, flags, ref *pResult) ? 1 : 0;
+                return _this.getTailCallHelpers(ref *callToken, sig, flags, ref *pResult) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -2262,7 +2262,7 @@ static byte _convertPInvokeCalliToCall(IntPtr thisHandle, IntPtr* ppException, C
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.convertPInvokeCalliToCall(ref *pResolvedToken, mustConvert != 0) ? 1 : 0;
+                return _this.convertPInvokeCalliToCall(ref *pResolvedToken, mustConvert != 0) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -2277,7 +2277,7 @@ static byte _notifyInstructionSetUsage(IntPtr thisHandle, IntPtr* ppException, I
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.notifyInstructionSetUsage(instructionSet, supportEnabled != 0) ? 1 : 0;
+                return _this.notifyInstructionSetUsage(instructionSet, supportEnabled != 0) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
@@ -2377,7 +2377,7 @@ static byte _logMsg(IntPtr thisHandle, IntPtr* ppException, uint level, byte* fm
             var _this = GetThis(thisHandle);
             try
             {
-                return _this.logMsg(level, fmt, args) ? 1 : 0;
+                return _this.logMsg(level, fmt, args) ? (byte)1 : (byte)0;
             }
             catch (Exception ex)
             {
diff --git a/src/coreclr/tools/Common/JitInterface/CorInfoTypes.cs b/src/coreclr/tools/Common/JitInterface/CorInfoTypes.cs
index 5523fb66c0b..71eeb6a0c4a 100644
--- a/src/coreclr/tools/Common/JitInterface/CorInfoTypes.cs
+++ b/src/coreclr/tools/Common/JitInterface/CorInfoTypes.cs
@@ -1087,7 +1087,7 @@ public unsafe struct CORINFO_DEVIRTUALIZATION_INFO
         //
         public CORINFO_METHOD_STRUCT_* devirtualizedMethod;
         public byte _requiresInstMethodTableArg;
-        public bool requiresInstMethodTableArg { get { return _requiresInstMethodTableArg != 0; } set { _requiresInstMethodTableArg = value ? 1 : 0; } }
+        public bool requiresInstMethodTableArg { get { return _requiresInstMethodTableArg != 0; } set { _requiresInstMethodTableArg = value ? (byte)1 : (byte)0; } }
         public CORINFO_CONTEXT_STRUCT* exactContext;
     }
 
diff --git a/src/coreclr/tools/Common/JitInterface/ThunkGenerator/Program.cs b/src/coreclr/tools/Common/JitInterface/ThunkGenerator/Program.cs
index 7c1d13e0273..67f64f0339d 100644
--- a/src/coreclr/tools/Common/JitInterface/ThunkGenerator/Program.cs
+++ b/src/coreclr/tools/Common/JitInterface/ThunkGenerator/Program.cs
@@ -324,7 +324,7 @@ unsafe partial class CorInfoImpl
                 tw.Write(")");
                 if (decl.ReturnType.IsBOOL || decl.ReturnType.IsBoolean)
                 {
-                    tw.Write(" ? 1 : 0");
+                    tw.Write($" ? ({decl.ReturnType.UnmanagedTypeName})1 : ({decl.ReturnType.UnmanagedTypeName})0");
                 }
                 tw.Write(";");
                 tw.Write(@"
diff --git a/src/libraries/System.Data.Common/src/System/Xml/DataSetMappper.cs b/src/libraries/System.Data.Common/src/System/Xml/DataSetMappper.cs
index 55480193f85..550e3abf948 100644
--- a/src/libraries/System.Data.Common/src/System/Xml/DataSetMappper.cs
+++ b/src/libraries/System.Data.Common/src/System/Xml/DataSetMappper.cs
@@ -314,13 +314,13 @@ internal bool IsRegionRadical(XmlBoundElement rowElem)
                 }
 
                 // must have no attributes
-                if (e.HasAttributes)
+                if (e!.HasAttributes)
                 {
                     return false;
                 }
 
                 // must have exactly one text node child
-                XmlNode? fc = e.FirstChild;
+                XmlNode? fc = e!.FirstChild;
                 if (fc == null || fc.NodeType != XmlNodeType.Text || fc.NextSibling != null)
                 {
                     return false;
diff --git a/src/libraries/System.Private.CoreLib/src/System/IO/Path.cs b/src/libraries/System.Private.CoreLib/src/System/IO/Path.cs
index 235c8d96e22..ba99d969546 100644
--- a/src/libraries/System.Private.CoreLib/src/System/IO/Path.cs
+++ b/src/libraries/System.Private.CoreLib/src/System/IO/Path.cs
@@ -694,9 +694,9 @@ private static unsafe string JoinInternal(ReadOnlySpan<char> first, ReadOnlySpan
             Debug.Assert(first.Length > 0 && second.Length > 0 && third.Length > 0, "should have dealt with empty paths");
 
             byte firstNeedsSeparator = PathInternal.IsDirectorySeparator(first[first.Length - 1])
-                || PathInternal.IsDirectorySeparator(second[0]) ? 0 : 1;
+                || PathInternal.IsDirectorySeparator(second[0]) ? (byte)0 : (byte)1;
             byte secondNeedsSeparator = PathInternal.IsDirectorySeparator(second[second.Length - 1])
-                || PathInternal.IsDirectorySeparator(third[0]) ? 0 : 1;
+                || PathInternal.IsDirectorySeparator(third[0]) ? (byte)0 : (byte)1;
 
             fixed (char* f = &MemoryMarshal.GetReference(first), s = &MemoryMarshal.GetReference(second), t = &MemoryMarshal.GetReference(third))
             {
@@ -755,11 +755,11 @@ private static unsafe string JoinInternal(ReadOnlySpan<char> first, ReadOnlySpan
             Debug.Assert(first.Length > 0 && second.Length > 0 && third.Length > 0 && fourth.Length > 0, "should have dealt with empty paths");
 
             byte firstNeedsSeparator = PathInternal.IsDirectorySeparator(first[first.Length - 1])
-                || PathInternal.IsDirectorySeparator(second[0]) ? 0 : 1;
+                || PathInternal.IsDirectorySeparator(second[0]) ? (byte)0 : (byte)1;
             byte secondNeedsSeparator = PathInternal.IsDirectorySeparator(second[second.Length - 1])
-                || PathInternal.IsDirectorySeparator(third[0]) ? 0 : 1;
+                || PathInternal.IsDirectorySeparator(third[0]) ? (byte)0 : (byte)1;
             byte thirdNeedsSeparator = PathInternal.IsDirectorySeparator(third[third.Length - 1])
-                || PathInternal.IsDirectorySeparator(fourth[0]) ? 0 : 1;
+                || PathInternal.IsDirectorySeparator(fourth[0]) ? (byte)0 : (byte)1;
 
             fixed (char* f = &MemoryMarshal.GetReference(first), s = &MemoryMarshal.GetReference(second), t = &MemoryMarshal.GetReference(third), u = &MemoryMarshal.GetReference(fourth))
             {
-- 
2.25.4

